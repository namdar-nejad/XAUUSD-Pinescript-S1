// @version=4
strategy("Strat1", shorttitle="S", overlay = true)

// candle types
greenCandle = (close > open)
redCandle = (close < open)
// the numberring in the brackets is weired but it's right
GGR = greenCandle[2] and greenCandle[1] and redCandle	// green, green, red 
RRG = redCandle[2] and redCandle[1] and greenCandle[0]	// red, red, green

// Calculates the money flow index value
mfi_period = input(1, title="MFI Period", minval=1)

// Function to calculate the mfi
calc_mfi(len) =>
    tp = nz(hlc3)  // typical price
    pos_mf = sum(change(tp) > 0 ? tp : 0, len) * volume // pos. money flow
    neg_mf = sum(change(tp) < 0 ? tp : 0, len) * volume // neg. money flow
    mr = pos_mf / neg_mf // money ratio
    mfi = 100 - (100 / (1 + mr))
    mfi

// mfi_val holds the mfi at each point
mfi_val = calc_mfi(mfi_period)




getAction() =>

// the bars we are working with (bar1 being the first and bar3 being the last bar)
    bar1 = close[2] - open[2]
    bar2 = close[1] - open[1]
    bar3 = close[0] - open[0]

// if red, red, green
	if RRG
		fib_dir = 0.0
		if mfi_val[1] == 0
			fib_dir := low[1] - open[2]
		else // mfi_val == 1
			fib_dir := high[1] - open[2]

		if not ((abs(bar1) <  bar3 and abs(bar2) > bar3) or (abs(bar2) <  bar3 and abs(bar1) > bar3))
			fib_dir := -1 * fib_dir

		fib_dir

// start and end timestamp for backtesting
start = timestamp(2022, 8, 12, 0, 0)
end = timestamp(2021, 8, 12, 0, 0)

if time >= start and time <= end
	strategy.entry("Long", strategy.long, 10000.0, when=getAction() > 0 ? 1 : na)
	strategy.entry("Short", strategy.short, 10000.0, when=getAction() <= 0 ? 1 : na)
	
	strategy.close("Long", when = getAction() > 0 ? 1 : na)
	strategy.close("Short", when = getAction() <= 0 ? 1 : na)

plotshape(getAction() > 0 ? 1 : na, color=color.lime, style=shape.arrowup, offset = 1)
plotshape(getAction() <= 0 ? 1 : na, color=color.red, style=shape.arrowdown, offset = 1)
// plot(mfi_val, title="MFI", color=color.teal, linewidth=2)
